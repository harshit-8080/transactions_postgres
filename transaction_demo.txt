exports.transactions_demo = async(req,res)=>{
	
	const t = await sequelize.transaction();

	try{
		const user = await db.user.create(userObject,{transaction:t});

		const data = await db.user.findAll({
			where:{
				id:100;
			}
		},{
			transaction:t
		});

		await t.commit();
		
	}
	catch(error){
		await t.rollback();
	}	

}


isolation levels in transactions
	const { Transaction } = require('sequelize');

	// The following are valid isolation levels:
	Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED // "READ UNCOMMITTED"  	 -> 	lowest level of isolation
	Transaction.ISOLATION_LEVELS.READ_COMMITTED // "READ COMMITTED"      	 -> 	better level of isolation
	Transaction.ISOLATION_LEVELS.REPEATABLE_READ  // "REPEATABLE READ"   	 -> 	reads data from the time Stap  Transactions begins
	Transaction.ISOLATION_LEVELS.SERIALIZABLE // "SERIALIZABLE"        		 -> 
 

Points to remember :-
	1. sequelize dont do use transaction bydefault.

	2.	BUt we should use transaction for productions

	3.	Two Types of transactions in sequelize
			1.  unmanaged transaction  --> Above example is unmanaged  transaction as here we are doing manually

			2. 	managed transaction --> Managed transactions handle committing or rolling back the transaction automatically. 
										You start a managed transaction by passing a callback to sequelize.transaction.

	4.		

